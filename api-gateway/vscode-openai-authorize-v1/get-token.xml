<policies>
    <inbound>
        <base />
        <check-header name="Authorization" failed-check-httpcode="401" failed-check-error-message="Not authorized" ignore-case="false" />
        <send-request mode="copy" response-variable-name="gitEmails" ignore-error="false">
            <set-url>https://api.github.com/user/emails</set-url>
            <set-method>GET</set-method>
            <set-header name="User-Agent" exists-action="override">
                <value>arbs.io/1.0</value>
            </set-header>
        </send-request>
        <set-variable name="primaryEmail" value="@{
                var emails = ((IResponse)context.Variables["gitEmails"]).Body.As<JArray>(preserveContent: true);
                var email = "invalid";
                foreach (JObject item in emails)
                {
                    if (item.GetValue("primary").ToString() == "True")
                    {
                        email = item.GetValue("email").ToString();
                    }
                }
                return email;
        }" />
        <return-response>
            <set-status code="200" reason="OK" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                var jwtHeaderBase64UrlEncoded = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9";

                // Construct the Base64Url-encoded payload
                var exp = new DateTimeOffset(DateTime.Now.AddMinutes(10)).ToUnixTimeSeconds();  // sets the expiration of the token to be 10 minutes from now
                var system = "vscode-openai";
                var username = ((string)context.Variables["primaryEmail"]);

                var payload = new { exp, system, username };
                var jwtPayloadBase64UrlEncoded = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(payload))).Replace("/", "_").Replace("+", "-"). Replace("=", "");

                // Construct the Base64Url-encoded signature
                //var hasher = new System.Security.Cryptography.HMACSHA256(jwtPayloadBase64UrlEncoded);
                var signature = new HMACSHA256(Encoding.UTF8.GetBytes("{{azure-openai-token-hash}}")).ComputeHash(Encoding.UTF8.GetBytes($"{jwtHeaderBase64UrlEncoded}.{jwtPayloadBase64UrlEncoded}"));
                var jwtSignatureBase64UrlEncoded = Convert.ToBase64String(signature).Replace("/", "_").Replace("+", "-"). Replace("=", "");


                // Return the HMAC SHA256-signed JWT as the value for the Authorization header
                var token = $"{jwtHeaderBase64UrlEncoded}.{jwtPayloadBase64UrlEncoded}.{jwtSignatureBase64UrlEncoded}";
                var type = "access_token";
                var response = new { type, token };

                return JsonConvert.SerializeObject(response);
            }</set-body>
        </return-response>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <return-response>
            <set-status code="401" reason="OK" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body template="liquid">
                {
                    "statusCode": 401,
                    "message": "Not authorized"
                }
            </set-body>
        </return-response>
    </on-error>
</policies>